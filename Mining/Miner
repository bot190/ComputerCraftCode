-- Create reference to modem
modem = peripheral.wrap("right")


function update()
	
	if shell.run("github bot190 ComputerCraftCode ./ Mining") then
		fs.delete("startup")
		fs.move("/ComputerCraftCode/Mining/Miner", "startup")
	else
		print("Failed to update")
	end
	os.reboot()
end

function pack()
	--Ender chest
	turtle.select(3)
	turtle.dig()
	turtle.down()
	--Mining well
	turtle.select(2)
	turtle.dig()
	--Loader
	if (fs.exists("wait")) then
		modem.open(191)
		os.pullEvent("modem_message")
		modem.close(191)
		turtle.select(6)
		turtle.digDown()
	elseif fs.exists("mover") then 
		turtle.select(5)
		turtle.digDown()
		turtle.back()
		turtle.placeDown()
		turtle.forward()
		modem.transmit(191, 191, "Run")
	end
	--Conduit
	turtle.forward()
	turtle.select(1)
	turtle.dig()
	modem.transmit(192,192, "Done")
end

function move()
	if turtle.back() == false then
		turtle.turnRight()
		turtle.turnRight()
		--Handle extra crap
		if(turtle.getItemCount(5) ==0 ) then
			turtle.select(5)
		elseif (turtle.getItemCount(6) ==0 ) then
			turtle.select(6)
		elseif (turtle.getItemCount(7) == 0) then
			turtle.select(7)
		elseif (turtle.getItemCount(8) == 0) then
			turtle.select(8)
		end
		turtle.dig()
		turtle.up()
		turtle.dig()
		turtle.down()
		turtle.turnRight()
		turtle.turnRight()
		turtle.back()
	end
end

function shuffle()
	move()
	modem.open(192)
	modem.transmit(192,192, "Done")
	modem.close(192)
end

function setup()
	--Conduit in slot 1
	turtle.select(1)
	turtle.place()
	move()
	--Mining Well in slot 2
	turtle.select(2)
	turtle.place()
	--Place Second Chunk Loader
	if (turtle.getItemCount(6) >= 1) then
		turtle.select(6)
		turtle.placeDown()
	end
	if (turtle.getItemCount(5) >= 1) then
		turtle.select(5)
		turtle.placeDown()
	end
	--EnderChest in slot 3
	turtle.up()
	turtle.select(3)
	turtle.place()
	--Check if we have extra crap and throw away
	for i=6,8 do
		if (turtle.getItemCount(i) >= 1) then
			turtle.select(i)
			turtle.drop()
		end
	end
	modem.open(192)
	modem.transmit(192,192, "Done")
	modem.close(192)
end

function checkRun()
	if turtle.getItemCount(13) == 1 then
		turtle.select(13)
		turtle.placeUp()
		Run = peripheral.call("top", "getStackInSlot", 1)
		turtle.digUp()
		modem.open(192)
		if Run then
			if Run["qty"]>0 then
				modem.transmit(192, 192, "Run")
			else 
				modem.transmit(192, 192, "Stop")
			end
		else
			modem.transmit(192, 192, "Stop")
		end
		modem.close(192)
	end
end

function forward()
	if turtle.forward() == false then
		sleep(1)
		forward()
	else 
		turtle.forward()
	end
end

function back()
	if turtle.back() == false then
		sleep(1)
		back()
	else
		turtle.back()
	end
end
while true do
	modem.open(192)
	local event, modemSide, senderChannel, replyChannel, message, senderDistance = os.pullEvent("modem_message")
	modem.close(192)
	if (message == "Pack") then
		pack()
	elseif message == "Move" then
		shuffle()
	elseif message == "Setup" then
		setup()
	elseif message == "CheckRun" then
		checkRun()
	elseif message == "Update" then
		update()
	elseif message == "Right" then
		turtle.turnRight()
	elseif message == "Left" then
		turtle.turnLeft()
	elseif message == "Forward" then
		forward()
	elseif message == "Back" then

	end
end
